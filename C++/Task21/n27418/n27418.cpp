// https://inf.reshuege.ru/problem?id=27418

#include <iostream>

// s1 и s2 - количества камней в кучах к текущему ходу.
// k - номер хода. Ходы с четными номерами являются ходами Вани, с нечетными - Пети.
// n - номер хода, до которого (включительно) Ваня должен выиграть.
bool Step(int s1, int s2, int k, int n)
{
	if (k > n)
	{
		// Ваня не выиграл за n ходов => не выигрышная стратегия.
		return false;
	}
	if (s1 + s2 + 1 >= 77 || s1 * 2 + s2 >= 77 || s1 + s2 * 2 >= 77)
	{
		// Игрок может закончить игру в этом ходе.
		// Возвращаем true, если сейчас четный ход (первый или второй ход Пети).
		return k % 2 == 0;
	}
	bool r1 = Step(s1 + 1, s2, k + 1, n);
	bool r2 = Step(s1, s2 + 1, k + 1, n);
	bool r3 = Step(s1 * 2, s2, k + 1, n);
	bool r4 = Step(s1, s2 * 2, k + 1, n);
	if (k % 2 != 0)
	{
		// Ход Пети
		// Проверяем все возможные ходы Пети, так как Ваня должен выиграть при любом из них.
		return r1 && r2 && r3 && r4;
	}
	else
	{
		// Ход Вани.
		// Хотя бы один вариант хода Вани должен привести к победе.
		return r1 || r2 || r3 || r4;
	}
}

int main()
{
	for (int i = 1; i < 68; i++)
	{
		// Ваня может выиграть вторым или четвертым ходом (своим первым или вторым),
		// но у Вани нет стратегии, которая позволит ему гарантированно выиграть вторым ходом (своим первым).
		if (Step(7, i, 1, 4) && !Step(7, i, 1, 2))
		{
			// Выводим первое подходящее значение S и выходим из цикла. 
			std::cout << i << std::endl;
			break;
		}
	}
	return 0;
}